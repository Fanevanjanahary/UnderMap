# -*- coding: utf-8 -*-
"""
/***************************************************************************
 UnderMap
                                 A QGIS plugin
 Plugin de Futurmap pour le traitement des réseaux enterrés
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-10-15
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Futurmap
        email                : fanevanjanahary@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os, logging
from os.path import dirname, join, exists

from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QToolButton, QMenu, QFileDialog, QMessageBox
from qgis.core import QgsSettings, QgsProject

# Initialize Qt resources from file resources.py
# from .resources import *
# Import the code for the dialog
from .ui.undermap_dialog import UnderMapDialog
from .ui.add_operator_dialog import AjouterOperateurDialog
from .utilities.utilities import get_project_path
from UnderMap.process import (
    initialise_pdf,
    initialise_fdp,
    initialise_emprise,
    export_xlsx_report
    )


LOGGER = logging.getLogger('UnderMap')


class UnderMap:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = join(
            self.plugin_dir,
            'i18n',
            'UnderMap_{}.qm'.format(locale))

        if exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = UnderMapDialog()
        self.addop = AjouterOperateurDialog()

        # Initialise buttton
        self.init_button = QToolButton()
        self.init_button.setMenu(QMenu())
        self.init_button.setPopupMode(QToolButton.MenuButtonPopup)

        # toolBar
        self.toolbar = self.iface.addToolBar('UnderMap')
        self.toolbar.setObjectName('UnderMap')

        # actions
        self.initialisePDFAction = None
        self.reportAction = None
        self.addOperatorAction = None
        self.initialiseFDPAction = None
        self.initialiseEmpriseAction = None

        QgsSettings().setValue("qgis/digitizing/reuseLastValues", True)

    @staticmethod
    def tr(message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('UnderMap', message)

    # noinspection PyPep8Naming
    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        # the actions
        self.initialisePDFAction = QAction(
            QIcon(join(dirname(__file__), 'resources', 'initialpdf.png')),
            'Initialiser PDF',
            self.iface.mainWindow())

        self.addOperatorAction = QAction(
            QIcon(join(dirname(__file__), 'resources', 'ajouterOperateur.png')),
            'Ajouter un exploitant',
            self.iface.mainWindow())

        self.reportAction = QAction(
            QIcon(join(dirname(__file__), 'resources', 'icon.png')),
            'Générer le rapport',
            self.iface.mainWindow())

        self.initialiseFDPAction = QAction(
            QIcon(join(dirname(__file__), 'resources', 'icon.png')),
            'Initialiser un FDP',
            self.iface.mainWindow())

        self.initialiseEmpriseAction = QAction(
            QIcon(join(dirname(__file__), 'resources', 'icon.png')),
            'Initialiser une emprise',
            self.iface.mainWindow())

        # actions dialogs
        self.initialisePDFAction.triggered.connect(self.initialise_PDF)
        self.addOperatorAction.triggered.connect(self.add_operator)
        self.initialiseFDPAction.triggered.connect(self.initialise_FDP)
        self.initialiseEmpriseAction.triggered.connect(self.initialise_emprise)
        self.reportAction.triggered.connect(self.export_report)

        # add actions on menu
        self.init_button.menu().addAction(self.initialisePDFAction)
        self.init_button.menu().addAction(self.addOperatorAction)
        self.init_button.setDefaultAction(self.initialisePDFAction)
        # add separator
        # self.initialiseFDPAction.insertSeparator(self.initialisePDFAction)
        self.init_button.menu().addAction(self.initialiseFDPAction)
        self.init_button.menu().addAction(self.initialiseEmpriseAction)

        # add actions and menu in toolbar
        self.toolbar.addWidget(self.init_button)
        self.toolbar.addAction(self.reportAction)


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        self.iface.mainWindow().removeToolBar(self.toolbar)

    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def add_operator(self):
        self.addop.exec_()

    def initialise_PDF(self):
        project_path = get_project_path()
        if project_path == './':
            QMessageBox.warning(None,"Avertisment","Veulliez ouvrir un projet qgis")
            return
        else:
            dir_selected = QFileDialog.getExistingDirectory(None, "Sélectionner un dossier", project_path,  QFileDialog.ShowDirsOnly)
            if dir_selected == '':
                self.iface.messageBar().pushWarning('Undermap', "Aucun dossier séléctionné")
                return
            else:
                initialise_pdf(dir_selected)

    def initialise_FDP(self):
        project_path = get_project_path()
        if project_path == './':
            QMessageBox.warning(None, "Avertisment", "Veulliez ouvrir un projet qgis")
            return
        else:
            fileSelected = QFileDialog.getOpenFileName(None, "Sélectionnez un fichier", project_path, "*.dxf")
            if fileSelected == ('', ''):
                self.iface.messageBar().pushWarning('Undermap', "Aucun fichier dxf séléctionné")
                return
            else:
                initialise_fdp(fileSelected)

    def initialise_emprise(self):
        project_path = get_project_path()
        if project_path == './':
            QMessageBox.warning(None, "Avertissement", "Veuillez ouvrir un projet QGIS et l’enregistrer")
            return
        else:
            fileSelected = QFileDialog.getOpenFileName(None, "Sélectionnez un fichier", project_path, "*.kml")
            if fileSelected == ('', ''):
                self.iface.messageBar().pushWarning('Undermap', "Aucun fichier kml séléctionné")
                return
            else:
                initialise_emprise(fileSelected)


    def export_report(self):
        project_path = get_project_path()
        if project_path == './':
            QMessageBox.warning(None, "Avertisment", "Veuillez ouvrir un projet qgis")
            return
        else:
            if export_xlsx_report(project_path):
                self.iface.messageBar().pushInfo('Undermap', "La génération du rapport a bien reussi."
                                                            )
                os.startfile(join(project_path, QgsProject.instance().baseName()+'.xlsx'))
            else:
                QMessageBox.warning(None, 'Undermap', "QGIS ne peut pas écrire "
                                                         "le rapport car le fichier"
                                                             " {} est ouvert "
                                                         "dans une autre application"
                                                        .format(join(project_path, QgsProject.instance()
                                                        .baseName()+'.xlsx')))

